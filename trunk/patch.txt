### Eclipse Workspace Patch 1.0
#P jain-sip
Index: src/gov/nist/javax/sip/stack/SIPTransactionStack.java
===================================================================
RCS file: /cvs/jain-sip/src/gov/nist/javax/sip/stack/SIPTransactionStack.java,v
retrieving revision 1.95
diff -u -r1.95 SIPTransactionStack.java
--- src/gov/nist/javax/sip/stack/SIPTransactionStack.java	9 Oct 2008 17:41:45 -0000	1.95
+++ src/gov/nist/javax/sip/stack/SIPTransactionStack.java	20 Oct 2008 16:31:03 -0000
@@ -44,6 +44,7 @@
 import javax.sip.header.*;
 
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.*;
 import java.io.IOException;
 import java.net.*;
@@ -131,7 +132,7 @@
 
 	protected int clientTransactionTableLowaterMark = 800;
 
-	private int activeClientTransactionCount;
+	private AtomicInteger activeClientTransactionCount;
 
 	// Hashtable for server transactions.
 	private ConcurrentHashMap<String,SIPServerTransaction> serverTransactionTable;
@@ -1395,9 +1396,9 @@
 	private void addTransactionHash(SIPTransaction sipTransaction) {
 		SIPRequest sipRequest = sipTransaction.getOriginalRequest();
 		if (sipTransaction instanceof SIPClientTransaction) {
+			int activeClientTransactionCountInt = this.activeClientTransactionCount.get(); 
 			if (!this.unlimitedClientTransactionTableSize) {
-				if (this.activeClientTransactionCount > clientTransactionTableHiwaterMark) {
-
+				if (activeClientTransactionCountInt > clientTransactionTableHiwaterMark) {
 					try {
 						synchronized (this.clientTransactionTable) {
 							this.clientTransactionTable.wait();
@@ -1413,7 +1414,7 @@
 					}
 				}
 			}
-			this.activeClientTransactionCount++;
+			this.activeClientTransactionCount.compareAndSet(activeClientTransactionCountInt, activeClientTransactionCountInt+1);
 			String key = sipRequest.getTransactionId();
 			clientTransactionTable.put(key,(SIPClientTransaction) sipTransaction);
 			if (logWriter.isLoggingEnabled()) {
@@ -1437,8 +1438,8 @@
 	 * 
 	 */
 	protected void decrementActiveClientTransactionCount() {
-		this.activeClientTransactionCount--;
-		if (this.activeClientTransactionCount <= this.clientTransactionTableLowaterMark
+		
+		if (this.activeClientTransactionCount.decrementAndGet() <= this.clientTransactionTableLowaterMark
 				&& !this.unlimitedClientTransactionTableSize) {
 			synchronized (this.clientTransactionTable) {
 
@@ -2185,7 +2186,7 @@
 	 * @return the activeClientTransactionCount
 	 */
 	public int getActiveClientTransactionCount() {
-		return activeClientTransactionCount;
+		return activeClientTransactionCount.get();
 	}
 
 	public boolean isRfc2543Supported() {
