<?xml version="1.0"?>
<!-- 

authors of build.xml: Initial: Olivier Deruelle deruelle@nist.gov
Revisions and fixes by:

        M. Ranganathan 		 <mranga@nist.gov>

        Gordon Ledgard 		 <gledgard@iperiea.com>

        Steven Lass    		 <slass@wcomnet.com>

        Sverker Abrahamsson	 <sverker@abrahamsson.com>

        Majdi Abuelbassal 	 <majdi.abuelbassal@bbumail.com>

        Jean Deruelle		 <jeand@nist.gov>

        Dan Muresan		 <muresan@gmail.com>
        
        Jeroen van Bemmel <jbemmel@lucent.com>

        Ivelin Ivanov <ivelin@mobicents.org>

For using ANT:

Ant is a platform independent build tool.
Get the tool from www.apache.org and install. Set your path to the ant shell
(batch) file.

>From the command prompt, execute the following command:
ant target




Where avaliable targets are:

    - ship -> Compiles all and wraps up this whole project into a tar file.

    - all -> Builds everything: stack, tools, examples and docs.

    - javadoc -> Builds java documentation.

    - compiletools -> Compiles the tools directory.

    - compileexamples -> Compiles the examples directory.

    - compileri -> Compiles the reference implementation.

    - compilesdp -> Compiles the sdp

    - compileapi -> Compiles the jainapi

    - clean   -> cleans everything: All the built stuff and temp files.

    - init	-> create the classes directory

    - runtck -> Cleans, compile and run the tck.

On my machine I run this as follows:
c:/jakarta-ant/bin/ant all
-->

<project name="NIST-SIP" default="all">
	<!-- Allow user to override defaults -->
	<property file="ant-build-config.properties" />
	<!-- set global properties for this build -->
	<property name="root" value="." />

	<property name="href.nist.homepage" value="http://www-x.antd.nist.gov/" />
	<property name="href.uncopyright" value="../uncopyright.html" />
	<property name="href.copyright" value="../copyright.html" />
	<property name="href.mailto" value="mailto:nist-sip-dev@antd.nist.gov" />
	<property name="href.distribution" value="http://jain-sip.dev.java.net" />

	<property name='tck_jar' value='tck.jar' />
	<property name="classes" value="${root}/classes" />
	<property name="retrowoven" value="${root}/retrowoven" />
	<property name="docdir" value="${root}/javadoc" />
	<property name="srcroot" value="${root}/src" />
	<property name="jain_api_jar" value="${root}/JainSipApi1.2.jar" />
	<property name="jain_api_jar14" value="${root}/JainSipApi1.2_java14.jar" />
	<property name="ri_jar" value="${root}/JainSipRi1.2.jar" />
	<property name="ri_jar14" value="${root}/nist-sip-1.2_java14.jar" />
	<property name="sdp_jar" value="${root}/nist-sdp-1.0.jar" />
	<property name="sip-sdp-jar" value="${root}/sip-sdp.jar" />
	<property name="unit_test_jar" value="${root}/nist-unit.jar" />
	<property name="log4j_jar" value="${root}/lib/${log4j}" />
	<property name="concurrent_jar" value="${root}/lib/${concurrent}" />
	<property name='j2se_api' value='http://java.sun.com/j2se/1.5/docs/api' />
	<property name="junit_jar" value = "${root}/lib/${junit}" />


	<target name="all" depends="make,compileexamples,compiletools,javadoc,javadoc-jain" />

	<target name="make" depends="clean,compileapi,compileri,compilesdp,sip-sdp-jar" />

	<target name="cleanlogs">
		<delete failonerror="0">
			<fileset file="*Log.txt" />
			<fileset file="*Log.txt" />
			<fileset file="*log.txt" />
			<fileset file="tckoutput.txt" />
			<fileset file="*debug.txt" />
			<fileset file="*Debug.txt" />
			<fileset dir="./logs" />
			<fileset dir="./test-reports" />
			<fileset dir="./src" includes="**/*log*.txt" />
			<fileset dir="./src" includes="**/*debug*.txt" />
			<fileset dir="./src" includes="**/*log*.txt" />
			<fileset dir="./src" includes="**/*debug*.txt" />
		</delete>
	</target>
	<!-- Clean everything -->
	<target name="clean" depends="cleanlogs">
		<delete dir="${classes}"  quiet="true" failonerror="false" />
		<delete dir="${retrowoven}" quiet="true"  failonerror="false" />
		<delete file="./${jain_api_jar}" failonerror="false"/>
		<delete file="./${jain_api_jar14}" failonerror="false" />
		<delete file="./${ri_jar}" failonerror="false" />
		<delete file="./${ri_jar14}" failonerror="false" />
		<delete file="./${sdp_jar}" failonerror="false" />
		<delete file="./${sip-sdp-jar}" failonerror="false" />
		<delete file="./${tck_jar}" failonerror="false" />
		<delete file="./tracesviewer.jar" failonerror="false" />
		<delete dir='javadoc' quiet="true" failonerror="false" />
		<delete dir='javadoc-jain' quiet="true" failonerror="false" />

	</target>

	<!-- Create ${classes} -->
	<target name="init">
		<mkdir dir="${classes}" />

		<!-- JvB: Check for Java 1.5 -->
		<available classname="java.lang.ProcessBuilder" property="jdk15.available" />
	</target>

	<target name="cleandocs">
		<delete dir="javadoc" />
	</target>

	<target name="javadoc">
		<mkdir dir="${docdir}" />
		<copy toDir="${docdir}">
			<fileset dir="src/javax/sip" includes="**/*.html" />
		</copy>

		<javadoc packagenames="javax.sip.*,javax.sip.header.*,javax.sip.message.*,javax.sip.address.*,gov.nist.javax.sip.*,gov.nist.javax.sip.address.*,gov.nist.javax.sip.message.*,gov.nist.javax.sip.header.*,gov.nist.javas.sip.header.ims.*,gov.nist.javax.sip.stack.*,gov.nist.core.net.*,gov.nist.javax.sip.parser.*,javax.sdp.*,gov.nist.javax.sdp.*,gov.nist.javax.sdp.fields.*" sourcepath="${srcroot}" overview="${docdir}/overview.html" destdir="javadoc" use="true" splitindex="true" windowtitle="The JAIN-SIP-1.2 RI For the People !" doctitle="NIST-SIP: The Reference Implementation for JAIN-SIP 1.2" public="true" author="true" version="true" defaultexcludes="yes" additionalparam="-breakiterator">
			<classpath>
				<pathelement location="${log4j_jar}" />
				<pathelement location="${concurrent_jar}" />
				<pathelement location="${jain_api_jar}" />
			</classpath>
			<link href="${j2se_api}" />
			<header>
				<![CDATA[
					<b> NIST-SIP: The Reference Implementation for JAIN-SIP 1.2 </b>
				]]>
			</header>
		<bottom>
			<![CDATA[
					<font size="-1">
			<a href="${href.nist.homepage}"> A product of the NIST/ITL Advanced Networking Technologies Division. </a>
			<br>
				<a href="${href.uncopyright}"> See conditions of use. </a>
				<br>
					<a href="${href.mailto}">Submit a bug report or feature request. </a>
					<br>
					</font>
				]]>
			</bottom>
			</javadoc>
		</target>

		<target name="javadoc-jain">

			<mkdir dir='javadoc-jain' />

			<javadoc packagenames="javax.sip.*,javax.sip.header.*,javax.sip.message.*,javax.sip.address.*,javax.sdp.*" sourcepath="${srcroot}" overview="${docdir}/overview.html" destdir="javadoc-jain" use="true" splitindex="true" windowtitle="JAIN-SIP-1.2 RI For the People !" doctitle="NIST SIP/SDP Parser and Stack (v1.3)" public="true" author="true" version="true" defaultexcludes="yes" additionalparam="-breakiterator">
				<classpath>
					<pathelement location="${jain_api_jar}" />
				</classpath>
				<link href="${j2se_api}" />
				<header>
					<![CDATA[
					<b> JAIN-SIP 1.2 API </b>
				]]>
			</header>
			<bottom>
				<![CDATA[
					<font size="-1">
				<a href="NIST, BEA Systems, Sun Microsystems and others" </a>
					<br>
						<a href="${href.copyright}"> See conditions of use. </a>
						<br>
							<a href="${href.mailto}">Submit a bug report or feature request. </a>
							<br>
							</font>
				]]>
			</bottom>
					</javadoc>
				</target>

				<!-- Compile the stack and libraries -->
				<target name="compileapi" depends="init">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" source="${javac.source}" target="${javac.target}" srcdir="${srcroot}" includes="javax/sip/**/*.java" destdir="${classes}" />
					<jar destfile="${jain_api_jar}" basedir="${classes}" includes="javax/sip/**/*.class" />
				</target>

				<target name="compileri" depends="clean,init,compileapi">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" source="${javac.source}" target="${javac.target}" includes="gov/nist/core/**/*.java, gov/nist/javax/sip/**/*.java" destdir="${classes}">
						<classpath>
							<pathelement location="${log4j_jar}" />
							<pathelement location="${concurrent_jar}" />
						</classpath>
					</javac>
					<jar destfile="${ri_jar}" basedir="${classes}" includes="gov/nist/**/*.class" />
				</target>

				<target name="compilesdp" depends="init">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" includes="javax/sdp/**/*.java, gov/nist/javax/sdp/**/*.java" destdir="${classes}">
					</javac>
					<jar destfile="${sdp_jar}" basedir="${classes}" includes="gov/nist/javax/sdp/**/*.class,javax/sdp/**/*.class" />
				</target>
	
				<target name="compileunit" depends="clean, init, sip-sdp-jar">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" 
						includes="test/unit/**/*.java" 
						destdir="${classes}">
					</javac>
					<jar destfile="${unit_test_jar}" basedir="${classes}" includes="test/unit/**/*.class" />
				</target>

				<target name="sip-sdp-jar" depends="compilejain">
					<jar destfile="${sip-sdp-jar}" basedir="${classes}" includes="javax/**/*.class,gov/nist/**/*.class" />
				</target>

				<target name='compilejain' depends='compileapi,compileri,compilesdp' />

				<!-- Compile the examples -->
				<target name="compileexamples" depends="init">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" includes="examples/**/*.java" destdir="${classes}">
						<classpath>
							<pathelement location="${log4j_jar}" />
							<pathelement location="${junit_jar}" />
							<pathelement location="${jakarta_regexp_jar}" />
						</classpath>
					</javac>
				</target>

				<!-- Compile the tck, always with debug on -->
				<target name="compiletck" depends="clean,init,compileri">
					<mkdir dir="${classes}" />
					<javac debug="on" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" destdir="${classes}">
						<include name="test/tck/**/*.java" />
						<include name="test/rihelper/**/*.java" />
						<classpath>
							<pathelement location='${junit_jar}' />
							<pathelement location='${log4j_jar}' />
						</classpath>
					</javac>
					<jar destfile="${tck_jar}" basedir="${classes}">
						<include name="test/tck/**/*.class" />
						<include name="test/rihelper/**/*.class" />
						<manifest>
							<attribute name="Built-By" value="${user.name}" />
							<attribute name="Main-Class" value="test.tck.Tck" />
						</manifest>
					</jar>
					<copy file="tck.properties" toDir="./classes" />
				</target>

				<!-- JvB: Runs the Retroweaver tool to convert 1.5 .class files
       to bytecode that 1.4 JVMs can run -->
				<target name="retroweaver" depends="compileapi,compileri" description="Executes the Retroweaver tool">

					<!-- Copy .class files to a separate directory -->
					<copy todir="${retrowoven}">
						<fileset dir="${classes}" includes="**/*.class" />
					</copy>

					<java classname="com.rc.retroweaver.Weaver">
						<arg line="-source ${retrowoven}" />
						<classpath>
							<fileset dir="lib">
								<include name="**/*.jar" />
							</fileset>
							<fileset dir="tools">
								<include name="**/*.jar" />
							</fileset>
						</classpath>
					</java>

					<!-- Generate a 1.4 version of the jars, including Retroweaver runtime classes (in both) -->
					<unjar src="lib/retroweaver-rt.jar" dest="${retrowoven}" />
					<jar destfile="${jain_api_jar14}" basedir="${retrowoven}" includes="javax/sip/**/*.class,com/rc/**/*.class" />
					<jar destfile="${ri_jar14}" basedir="${retrowoven}" includes="gov/nist/**/*.class,com/rc/**/*.class" />
				</target>

				<!-- this uses the junit task of ant to run the tck in self test mode -->

				<target name='runtck' depends="compiletck" description="Runs all TCK tests using the ant junit task.">
					<mkdir dir="test-reports" />
					<mkdir dir="logs" />

					<junit fork="yes" showoutput="yes" failureproperty="testing.failed">
						<classpath>
							<pathelement location="${jain_api_jar}" />
							<pathelement location="${ri_jar}" />
							<pathelement location="${log4j_jar}" />
							<pathelement location="${tck_jar}" />
							<pathelement location='${junit_jar}' />
							<pathelement location='${log4j_jar}' />
							<pathelement location='${concurrent_jar}' />

							<!-- add source path since this will pick up test.tck.gui.images -->
							<pathelement location='src' />

							<!-- add project root to the classpath in order to make tck.properties accessible. -->
							<pathelement location="${root}" />
						</classpath>
						<formatter type="xml" />

						<batchtest fork="yes" todir="test-reports" haltonfailure="no">
							<fileset dir="${srcroot}">
								<include name="test/tck/**/*Test.java" />
								<!-- TCP Tests excluded - its enough to test one transport for TCK compliance  -->
								<exclude name="**/Tcp*Test.java"/>
								<!-- Tls Tests excluded for tck compliance  -->
								<exclude name="test/tck/msgflow/callflows/tls/*Test.java"/>
							</fileset>
						</batchtest>
					</junit>

					<echo>The test report can be found at ./test-reports/html/index.html</echo>
					<fail if="testing.failed" />
				</target>
				<!-- only the TCK call flows -->
				<target name='runtckcallflows' depends="compiletck" description="Runs all TCK tests using the ant junit task.">
					<mkdir dir="test-reports" />
					<mkdir dir="logs" />

					<junit fork="yes" showoutput="yes" failureproperty="testing.failed">
						<classpath>
							<pathelement location="${jain_api_jar}" />
							<pathelement location="${ri_jar}" />
							<pathelement location="${log4j_jar}" />
							<pathelement location="${tck_jar}" />
							<pathelement location='${junit_jar}' />
							<pathelement location='${log4j_jar}' />
							<pathelement location='${concurrent_jar}' />

							<!-- add source path since this will pick up test.tck.gui.images -->
							<pathelement location='src' />

							<!-- add project root to the classpath in order to make tck.properties accessible. -->
							<pathelement location="${root}" />
						</classpath>
						<formatter type="xml" />

						<batchtest fork="yes" todir="test-reports" haltonfailure="no">
							<fileset dir="${srcroot}">
								<include name="test/tck/msgflow/callflows/**/*Test.java" />
							</fileset>
						</batchtest>
					</junit>

					<echo>The test report can be found at ./test-reports/html/index.html</echo>
					<fail if="testing.failed" />
				</target>

				<!-- target for build automation. will add runtck later -->




				<!-- compile to traces viewer jar -->
				<target name="viewerjar">
					<copy todir="${classes}/tools/tracesviewer/images">
						<fileset dir="${srcroot}/tools/tracesviewer/images" />
					</copy>
					<jar compress="false" destfile="tracesviewer.jar">
						<fileset dir="${classes}">
							<include name="tools/tracesviewer/**/*.*" />
						</fileset>
						<manifest>
							<attribute name="Built-By" value="${user.name}" />
							<attribute name="Main-Class" value="tools.tracesviewer.TracesViewer" />
						</manifest>
					</jar>
				</target>

				<!-- Compile the tools -->
				<target name="compiletools" depends="init">
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" nowarn="${javac.nowarn}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" includes="tools/tracesviewer/**/*.java" destdir="${classes}">
						<classpath>
							<pathelement location="${classes}" />
						</classpath>
					</javac>
					<copy todir="${classes}/tools/tracesviewer/images">
						<fileset dir="${srcroot}/tools/tracesviewer/images" />
					</copy>
					<javac debug="${javac.debug}" debuglevel="${javac.debuglevel}" source="${javac.source}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" srcdir="${srcroot}" includes="tools/sniffer/**/*.java" destdir="${classes}">
						<classpath>
							<pathelement location="${classes}" />
						</classpath>
					</javac>
				</target>
	<!-- add target for running all the parser tests -->
	<target name='unittest' depends="compileunit" description="Runs all unit tests using the ant junit task.">
		<mkdir dir="test-reports-parser" />
		<mkdir dir="logs-parser" />

		<junit fork="yes" showoutput="yes" failureproperty="testing.failed">
			<classpath>
				<pathelement location="${sip-sdp-jar}" />
				<pathelement location="${ri_jar}" />
				<pathelement location="${log4j_jar}" />
				<pathelement location='${junit_jar}' />
				<pathelement location='${log4j_jar}' />
				<pathelement location='${unit_test_jar}' />
				<pathelement location='${concurrent_jar}' />

				<!-- add source path since this will pick up test.tck.gui.images -->
				<pathelement location='src' />

				<!-- add project root to the classpath in order to make tck.properties accessible. -->
				<pathelement location="${root}" />
			</classpath>
			<formatter type="xml" />

			<batchtest fork="yes" todir="test-reports-parser" haltonfailure="no">
				<fileset dir="${srcroot}">
					<include name="test/unit/**/*ParserTest.java" />
				</fileset>
			</batchtest>
		</junit>

		<echo>The test report can be found at ./test-reports-parsert /html/index.html</echo>
		<fail if="testing.failed" />
	</target>
	<target name="cc-buildloop" depends="make,runtck,runtckcallflows,unittest,javadoc">
			<jar compress="true" destfile="jain-sip-1.2.jar">
					<fileset dir="../">
						<include name="jain-sip/**/*/" />
						<exclude name="jain-sip/classes/**/*/"/>
						<exclude name="jain-sip/*.jar"/>
					</fileset>
			</jar>

	</target>

</project>
